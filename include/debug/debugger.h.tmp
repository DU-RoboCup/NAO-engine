 /*
Copyright (c) 2016 "University of Denver"

This file is part of Pineapple.

Pineapple is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

VERSION HISTORY
-- Created by Paul Heinen 06/21/16

// FILE DESCRIPTION
Glorious Debug module to keep NAO safe
*/
#ifndef _DEBUGGER_H_GUARD_
#define __DEBUGGER_H_GUARD_

//Link dynamic libraries
#define BOOST_LOG_DYN_LINK 1

//INCLUDE
//booost libraries
#include <boost/log/trivial.hpp>
#include <boost/log/sources/global_logger_storage.hpp>
#include <boost/log/core/core.hpp>
#include <boost/log/expressions/formatters/date_time.hpp>
#include <boost/log/expressions.hpp>
#include <boost/log/sinks/sync_frontend.hpp>
#include <boost/log/sinks/text_ostream_backend.hpp>
#include <boost/log/sources/severity_logger.hpp>
#include <boost/log/support/date_time.hpp>
#include <boost/log/trivial.hpp>
#include <boost/log/utility/setup/common_attributes.hpp>
#include <boost/log/attributes/mutable_constant.hpp>
#include <boost/make_shared.hpp>
#include <boost/shared_ptr.hpp>

//Boost libraries not in 1.55
#include "null_deleter.hpp"

//Standard Libraries
#include <fstream>
#include <ostream>
//========END INCLUDE========//

/* Boost.Log Namespaces */

namespace logging = boost::log;
namespace src = boost::log::sources;
namespace expr = boost::log::expressions;
namespace sinks = boost::log::sinks;
namespace attrs = boost::log::attributes;





class Debugger
{
public:

    /* Define our asynchronous sync, this allows proper logging in a
     * multithreaded situation.
     */
    typedef 

